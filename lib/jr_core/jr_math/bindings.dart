// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Jeen Robotics Math
class JRMath {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  JRMath(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  JRMath.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  double add(
    double a,
    double b,
  ) {
    return _add(
      a,
      b,
    );
  }

  late final _addPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'add');
  late final _add = _addPtr.asFunction<double Function(double, double)>();

  double subtract(
    double a,
    double b,
  ) {
    return _subtract(
      a,
      b,
    );
  }

  late final _subtractPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'subtract');
  late final _subtract =
      _subtractPtr.asFunction<double Function(double, double)>();

  double multiply(
    double a,
    double b,
  ) {
    return _multiply(
      a,
      b,
    );
  }

  late final _multiplyPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'multiply');
  late final _multiply =
      _multiplyPtr.asFunction<double Function(double, double)>();

  double divide(
    double a,
    double b,
  ) {
    return _divide(
      a,
      b,
    );
  }

  late final _dividePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'divide');
  late final _divide = _dividePtr.asFunction<double Function(double, double)>();

  void async_add(
    double a,
    double b,
    AsyncCallback callback,
  ) {
    return _async_add(
      a,
      b,
      callback,
    );
  }

  late final _async_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double, ffi.Double, AsyncCallback)>>('async_add');
  late final _async_add =
      _async_addPtr.asFunction<void Function(double, double, AsyncCallback)>();
}

typedef AsyncCallbackFunction = ffi.Void Function(ffi.Double result);
typedef DartAsyncCallbackFunction = void Function(double result);
typedef AsyncCallback = ffi.Pointer<ffi.NativeFunction<AsyncCallbackFunction>>;
