// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Jeen Robotics Camera library
class Camera {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Camera(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Camera.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void initializeCamera() {
    return _initializeCamera();
  }

  late final _initializeCameraPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('initializeCamera');
  late final _initializeCamera =
      _initializeCameraPtr.asFunction<void Function()>();

  bool isCameraInitialized() {
    return _isCameraInitialized();
  }

  late final _isCameraInitializedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('isCameraInitialized');
  late final _isCameraInitialized =
      _isCameraInitializedPtr.asFunction<bool Function()>();

  void stopCamera() {
    return _stopCamera();
  }

  late final _stopCameraPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('stopCamera');
  late final _stopCamera = _stopCameraPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Uint8> processFrame(
    int width,
    int height,
  ) {
    return _processFrame(
      width,
      height,
    );
  }

  late final _processFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Int, ffi.Int)>>('processFrame');
  late final _processFrame =
      _processFramePtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int, int)>();
}
